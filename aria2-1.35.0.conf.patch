diff --git a/src/DownloadCommand.cc b/src/DownloadCommand.cc
index 2db41e4..129005a 100644
--- a/src/DownloadCommand.cc
+++ b/src/DownloadCommand.cc
@@ -306,10 +306,16 @@ void DownloadCommand::checkLowestDownloadSpeed() const
           startupIdleTime_) {
     int nowSpeed = peerStat_->calculateDownloadSpeed();
     if (nowSpeed <= lowestDownloadSpeedLimit_) {
-      throw DL_ABORT_EX2(fmt(EX_TOO_SLOW_DOWNLOAD_SPEED, nowSpeed,
+      if (getOption()->getAsBool(PREF_RETRY_ON_LOWEST_SPEED)){
+        throw DL_RETRY_EX2(fmt(EX_TOO_SLOW_DOWNLOAD_SPEED, nowSpeed,
                              lowestDownloadSpeedLimit_,
                              getRequest()->getHost().c_str()),
                          error_code::TOO_SLOW_DOWNLOAD_SPEED);
+      }
+      throw DL_ABORT_EX2(fmt(EX_TOO_SLOW_DOWNLOAD_SPEED, nowSpeed,
+                            lowestDownloadSpeedLimit_,
+                            getRequest()->getHost().c_str()),
+                        error_code::TOO_SLOW_DOWNLOAD_SPEED);
     }
   }
 }
diff --git a/src/HttpResponse.cc b/src/HttpResponse.cc
index 500cd64..b38311c 100644
--- a/src/HttpResponse.cc
+++ b/src/HttpResponse.cc
@@ -68,7 +68,7 @@ namespace aria2 {
 
 HttpResponse::HttpResponse() : cuid_{0} {}
 
-void HttpResponse::validateResponse() const
+int HttpResponse::validateResponse() const
 {
   int statusCode = getStatusCode();
   switch (statusCode) {
@@ -78,21 +78,23 @@ void HttpResponse::validateResponse() const
       // compare the received range against the requested range
       auto responseRange = httpHeader_->getRange();
       if (!httpRequest_->isRangeSatisfied(responseRange)) {
-        throw DL_ABORT_EX2(
-            fmt(EX_INVALID_RANGE_HEADER, httpRequest_->getStartByte(),
-                httpRequest_->getEndByte(), httpRequest_->getEntityLength(),
-                responseRange.startByte, responseRange.endByte,
-                responseRange.entityLength),
-            error_code::CANNOT_RESUME);
+        return -1;
+
+        // throw DL_ABORT_EX2(
+        //     fmt(EX_INVALID_RANGE_HEADER, httpRequest_->getStartByte(),
+        //         httpRequest_->getEndByte(), httpRequest_->getEntityLength(),
+        //         responseRange.startByte, responseRange.endByte,
+        //         responseRange.entityLength),
+        //     error_code::CANNOT_RESUME);
       }
     }
-    return;
+    return 0;
   case 304: // Not Modified
     if (!httpRequest_->conditionalRequest()) {
       throw DL_ABORT_EX2("Got 304 without If-Modified-Since or If-None-Match",
                          error_code::HTTP_PROTOCOL_ERROR);
     }
-    return;
+    return 0;
   case 300: // Multiple Choices
   case 301: // Moved Permanently
   case 302: // Found
@@ -103,13 +105,16 @@ void HttpResponse::validateResponse() const
       throw DL_ABORT_EX2(fmt(EX_LOCATION_HEADER_REQUIRED, statusCode),
                          error_code::HTTP_PROTOCOL_ERROR);
     }
-    return;
+    return 0;
   }
   if (statusCode >= 400) {
-    return;
+    return 0;
   }
-  throw DL_ABORT_EX2(fmt("Unexpected status %d", statusCode),
-                     error_code::HTTP_PROTOCOL_ERROR);
+
+  return statusCode;
+
+  // throw DL_ABORT_EX2(fmt("Unexpected status %d", statusCode),
+  //                    error_code::HTTP_PROTOCOL_ERROR);
 }
 
 std::string HttpResponse::determineFilename(bool contentDispositionUTF8) const
diff --git a/src/HttpResponse.h b/src/HttpResponse.h
index 2caffaf..6480ca4 100644
--- a/src/HttpResponse.h
+++ b/src/HttpResponse.h
@@ -62,7 +62,7 @@ private:
 public:
   HttpResponse();
 
-  void validateResponse() const;
+  int validateResponse() const;
 
   /**
    * Returns filename.
diff --git a/src/HttpResponseCommand.cc b/src/HttpResponseCommand.cc
index 6e2a01d..c24f8a6 100644
--- a/src/HttpResponseCommand.cc
+++ b/src/HttpResponseCommand.cc
@@ -51,16 +51,19 @@
 #include "DefaultBtProgressInfoFile.h"
 #include "DownloadFailureException.h"
 #include "DlAbortEx.h"
+#include "DlRetryEx.h"
 #include "util.h"
 #include "File.h"
 #include "Option.h"
 #include "Logger.h"
 #include "SocketCore.h"
 #include "message.h"
+#include "error_code.h"
 #include "prefs.h"
 #include "fmt.h"
 #include "HttpSkipResponseCommand.h"
 #include "HttpHeader.h"
+#include "Range.h"
 #include "LogFactory.h"
 #include "CookieStorage.h"
 #include "AuthConfigFactory.h"
@@ -154,7 +157,46 @@ bool HttpResponseCommand::executeInternal()
   }
 
   // check HTTP status code
-  httpResponse->validateResponse();
+  int r = httpResponse->validateResponse();
+  switch(r){
+    case 0:
+      break;
+    case -1: {
+      // 200 OK or 206 Partial Content: range not satisified
+      auto reqStartByte = httpResponse->getHttpRequest()->getStartByte();
+      auto reqEndByte = httpResponse->getHttpRequest()->getEndByte();
+      auto reqEntityLength = httpResponse->getHttpRequest()->getEntityLength();
+      auto responseRange = httpResponse->getHttpHeader()->getRange();
+
+      if (getOption()->getAsBool(PREF_RETRY_ON_NOT_SATISFIED_206)
+          && getOption()->getAsInt(PREF_RETRY_WAIT) > 0) {
+          throw DL_RETRY_EX2(
+              fmt(EX_INVALID_RANGE_HEADER, reqStartByte,
+                  reqEndByte, reqEntityLength,
+                  responseRange.startByte, responseRange.endByte,
+                  responseRange.entityLength),
+              error_code::HTTP_SERVICE_UNAVAILABLE);
+      }
+      throw DL_ABORT_EX2(
+              fmt(EX_INVALID_RANGE_HEADER, reqStartByte,
+                  reqEndByte, reqEntityLength,
+                  responseRange.startByte, responseRange.endByte,
+                  responseRange.entityLength),
+              error_code::CANNOT_RESUME);
+      break;
+    }
+    default: {
+      // Unexpected status code
+      if (getOption()->getAsBool(PREF_RETRY_ON_UNKNOWN)
+          && getOption()->getAsInt(PREF_RETRY_WAIT) > 0) {
+          throw DL_RETRY_EX2(fmt("Unexpected status %d", r),
+                            error_code::HTTP_SERVICE_UNAVAILABLE);
+      }
+      throw DL_ABORT_EX2(fmt("Unexpected status %d", r),
+                          error_code::HTTP_PROTOCOL_ERROR);
+    }
+  }
+
   httpResponse->retrieveCookie();
 
   const auto& httpHeader = httpResponse->getHttpHeader();
diff --git a/src/HttpSkipResponseCommand.cc b/src/HttpSkipResponseCommand.cc
index a722d77..f629465 100644
--- a/src/HttpSkipResponseCommand.cc
+++ b/src/HttpSkipResponseCommand.cc
@@ -204,7 +204,7 @@ bool HttpSkipResponseCommand::processResponse()
   auto statusCode = httpResponse_->getStatusCode();
   if (statusCode >= 400) {
     switch (statusCode) {
-    case 401:
+    case 401: // Unauthorized
       if (getOption()->getAsBool(PREF_HTTP_AUTH_CHALLENGE) &&
           !httpResponse_->getHttpRequest()->authenticationUsed() &&
           getDownloadEngine()->getAuthConfigFactory()->activateBasicCred(
@@ -213,16 +213,42 @@ bool HttpSkipResponseCommand::processResponse()
         return prepareForRetry(0);
       }
       throw DL_ABORT_EX2(EX_AUTH_FAILED, error_code::HTTP_AUTH_FAILED);
-    case 404:
+    case 404: // Not Found
       if (getOption()->getAsInt(PREF_MAX_FILE_NOT_FOUND) == 0) {
         throw DL_ABORT_EX2(MSG_RESOURCE_NOT_FOUND,
                            error_code::RESOURCE_NOT_FOUND);
       }
       throw DL_RETRY_EX2(MSG_RESOURCE_NOT_FOUND,
                          error_code::RESOURCE_NOT_FOUND);
-    case 502:
-    case 503:
-      // Only retry if pretry-wait > 0. Hammering 'busy' server is not
+    case 400: // Bad Request
+        if (getOption()->getAsBool(PREF_RETRY_ON_400)
+            && getOption()->getAsInt(PREF_RETRY_WAIT) > 0) {
+            throw DL_RETRY_EX2(fmt(EX_BAD_STATUS, statusCode),
+                               error_code::HTTP_SERVICE_UNAVAILABLE);
+        }
+        break;
+    case 403: // Forbidden
+        if (getOption()->getAsBool(PREF_RETRY_ON_403)
+            && getOption()->getAsInt(PREF_RETRY_WAIT) > 0) {
+            throw DL_RETRY_EX2(fmt(EX_BAD_STATUS, statusCode),
+                               error_code::HTTP_SERVICE_UNAVAILABLE);
+        }
+        break;
+    case 406: // Not Acceptable
+        if (getOption()->getAsBool(PREF_RETRY_ON_406)
+            && getOption()->getAsInt(PREF_RETRY_WAIT) > 0) {
+            throw DL_RETRY_EX2(fmt(EX_BAD_STATUS, statusCode),
+                               error_code::HTTP_SERVICE_UNAVAILABLE);
+        }
+        break;
+    case 408: // Request Timeout
+    case 429: // Too Many Requests
+    case 502: // Bad Gateway
+    case 503: // Service Unavailable
+    case 507: // Insufficient Storage
+    case 520: // https://github.com/aria2/aria2/issues/1229
+    case 521: // https://github.com/aria2/aria2/issues/1229
+      // Only retry if retry-wait > 0. Hammering 'busy' server is not
       // a good idea.
       if (getOption()->getAsInt(PREF_RETRY_WAIT) > 0) {
         throw DL_RETRY_EX2(fmt(EX_BAD_STATUS, statusCode),
@@ -230,12 +256,16 @@ bool HttpSkipResponseCommand::processResponse()
       }
       throw DL_ABORT_EX2(fmt(EX_BAD_STATUS, statusCode),
                          error_code::HTTP_SERVICE_UNAVAILABLE);
-    case 504:
+    case 504: // Gateway Timeout
       // This is Gateway Timeout, so try again
       throw DL_RETRY_EX2(fmt(EX_BAD_STATUS, statusCode),
                          error_code::HTTP_SERVICE_UNAVAILABLE);
     };
-
+    if (getOption()->getAsBool(PREF_RETRY_ON_UNKNOWN)
+        && getOption()->getAsInt(PREF_RETRY_WAIT) > 0) {
+        throw DL_RETRY_EX2(fmt(EX_BAD_STATUS, statusCode),
+                error_code::HTTP_SERVICE_UNAVAILABLE);
+    }
     throw DL_ABORT_EX2(fmt(EX_BAD_STATUS, statusCode),
                        error_code::HTTP_PROTOCOL_ERROR);
   }
diff --git a/src/OptionHandlerFactory.cc b/src/OptionHandlerFactory.cc
index 6bff4ca..bb3b0bf 100644
--- a/src/OptionHandlerFactory.cc
+++ b/src/OptionHandlerFactory.cc
@@ -158,7 +158,7 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
   }
   {
     OptionHandler* op(new BooleanOptionHandler(
-        PREF_CONTINUE, TEXT_CONTINUE, A2_V_FALSE, OptionHandler::OPT_ARG, 'c'));
+            PREF_CONTINUE, TEXT_CONTINUE, A2_V_TRUE, OptionHandler::OPT_ARG, 'c'));
     op->addTag(TAG_BASIC);
     op->addTag(TAG_FTP);
     op->addTag(TAG_HTTP);
@@ -432,7 +432,7 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
   {
     OptionHandler* op(new NumberOptionHandler(PREF_MAX_CONCURRENT_DOWNLOADS,
                                               TEXT_MAX_CONCURRENT_DOWNLOADS,
-                                              "5", 1, -1, 'j'));
+                                              "16", 1, -1, 'j'));
     op->addTag(TAG_BASIC);
     op->setChangeGlobalOption(true);
     handlers.push_back(op);
@@ -440,7 +440,7 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
   {
     OptionHandler* op(new NumberOptionHandler(PREF_MAX_CONNECTION_PER_SERVER,
                                               TEXT_MAX_CONNECTION_PER_SERVER,
-                                              "1", 1, 16, 'x'));
+                                              "16", 1, -1, 'x'));
     op->addTag(TAG_BASIC);
     op->addTag(TAG_FTP);
     op->addTag(TAG_HTTP);
@@ -501,7 +501,7 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
   }
   {
     OptionHandler* op(new UnitNumberOptionHandler(
-        PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, "20M", 1_m, 1_g, 'k'));
+            PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, "1M", 1_k, 1_g, 'k'));
     op->addTag(TAG_BASIC);
     op->addTag(TAG_FTP);
     op->addTag(TAG_HTTP);
@@ -834,7 +834,7 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
   }
   {
     OptionHandler* op(new NumberOptionHandler(
-        PREF_CONNECT_TIMEOUT, TEXT_CONNECT_TIMEOUT, "60", 1, 600));
+            PREF_CONNECT_TIMEOUT, TEXT_CONNECT_TIMEOUT, "30", 1, 600));
     op->addTag(TAG_FTP);
     op->addTag(TAG_HTTP);
     op->setInitialOption(true);
@@ -905,7 +905,7 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
   }
   {
     OptionHandler* op(new UnitNumberOptionHandler(
-        PREF_PIECE_LENGTH, TEXT_PIECE_LENGTH, "1M", 1_m, 1_g));
+            PREF_PIECE_LENGTH, TEXT_PIECE_LENGTH, "1M", 1_k, 1_g));
     op->addTag(TAG_ADVANCED);
     op->addTag(TAG_FTP);
     op->addTag(TAG_HTTP);
@@ -925,8 +925,8 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
     handlers.push_back(op);
   }
   {
-    OptionHandler* op(
-        new NumberOptionHandler(PREF_RETRY_WAIT, TEXT_RETRY_WAIT, "0", 0, 600));
+    OptionHandler* op(new NumberOptionHandler(
+          PREF_RETRY_WAIT, TEXT_RETRY_WAIT, "1", 0, 600));
     op->addTag(TAG_FTP);
     op->addTag(TAG_HTTP);
     op->setInitialOption(true);
@@ -934,6 +934,66 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
     op->setChangeOptionForReserved(true);
     handlers.push_back(op);
   }
+  {
+      OptionHandler* op(new BooleanOptionHandler(
+              PREF_RETRY_ON_LOWEST_SPEED, TEXT_RETRY_ON_LOWEST_SPEED, A2_V_FALSE, OptionHandler::OPT_ARG));
+      op->addTag(TAG_ADVANCED);
+      op->addTag(TAG_HTTP);
+      op->setInitialOption(true);
+      op->setChangeGlobalOption(true);
+      op->setChangeOptionForReserved(true);
+      handlers.push_back(op);
+  }
+  {
+      OptionHandler* op(new BooleanOptionHandler(
+              PREF_RETRY_ON_NOT_SATISFIED_206, TEXT_RETRY_ON_NOT_SATISFIED_206, A2_V_FALSE, OptionHandler::OPT_ARG));
+      op->addTag(TAG_ADVANCED);
+      op->addTag(TAG_HTTP);
+      op->setInitialOption(true);
+      op->setChangeGlobalOption(true);
+      op->setChangeOptionForReserved(true);
+      handlers.push_back(op);
+  }
+  {
+      OptionHandler* op(new BooleanOptionHandler(
+              PREF_RETRY_ON_400, TEXT_RETRY_ON_400, A2_V_FALSE, OptionHandler::OPT_ARG));
+      op->addTag(TAG_ADVANCED);
+      op->addTag(TAG_HTTP);
+      op->setInitialOption(true);
+      op->setChangeGlobalOption(true);
+      op->setChangeOptionForReserved(true);
+      handlers.push_back(op);
+  }
+  {
+      OptionHandler* op(new BooleanOptionHandler(
+              PREF_RETRY_ON_403, TEXT_RETRY_ON_403, A2_V_FALSE, OptionHandler::OPT_ARG));
+      op->addTag(TAG_ADVANCED);
+      op->addTag(TAG_HTTP);
+      op->setInitialOption(true);
+      op->setChangeGlobalOption(true);
+      op->setChangeOptionForReserved(true);
+      handlers.push_back(op);
+  }
+  {
+      OptionHandler* op(new BooleanOptionHandler(
+              PREF_RETRY_ON_406, TEXT_RETRY_ON_406, A2_V_FALSE, OptionHandler::OPT_ARG));
+      op->addTag(TAG_ADVANCED);
+      op->addTag(TAG_HTTP);
+      op->setInitialOption(true);
+      op->setChangeGlobalOption(true);
+      op->setChangeOptionForReserved(true);
+      handlers.push_back(op);
+  }
+  {
+      OptionHandler* op(new BooleanOptionHandler(
+              PREF_RETRY_ON_UNKNOWN, TEXT_RETRY_ON_UNKNOWN, A2_V_FALSE, OptionHandler::OPT_ARG));
+      op->addTag(TAG_ADVANCED);
+      op->addTag(TAG_HTTP);
+      op->setInitialOption(true);
+      op->setChangeGlobalOption(true);
+      op->setChangeOptionForReserved(true);
+      handlers.push_back(op);
+  }
   {
     OptionHandler* op(new BooleanOptionHandler(
         PREF_REUSE_URI, TEXT_REUSE_URI, A2_V_TRUE, OptionHandler::OPT_ARG));
@@ -971,7 +1031,7 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
   }
   {
     OptionHandler* op(
-        new NumberOptionHandler(PREF_SPLIT, TEXT_SPLIT, "5", 1, -1, 's'));
+            new NumberOptionHandler(PREF_SPLIT, TEXT_SPLIT, "128", 1, -1, 's'));
     op->addTag(TAG_BASIC);
     op->addTag(TAG_FTP);
     op->addTag(TAG_HTTP);
@@ -1276,7 +1336,7 @@ std::vector<OptionHandler*> OptionHandlerFactory::createOptionHandlers()
   }
   {
     OptionHandler* op(new LocalFilePathOptionHandler(
-        PREF_NETRC_PATH, TEXT_NETRC_PATH, util::getHomeDir() + "/.netrc",
+            PREF_NETRC_PATH, TEXT_NETRC_PATH, File::getCurrentDir() + "/.netrc",
         /* acceptStdin = */ false, 0, /* mustExist = */ false));
     handlers.push_back(op);
   }
diff --git a/src/OptionHandlerImpl.cc b/src/OptionHandlerImpl.cc
index 6214e84..f64b47e 100644
--- a/src/OptionHandlerImpl.cc
+++ b/src/OptionHandlerImpl.cc
@@ -548,7 +548,7 @@ void LocalFilePathOptionHandler::parseArg(Option& option,
     option.put(pref_, DEV_STDIN);
   }
   else {
-    auto path = util::replace(optarg, "${HOME}", util::getHomeDir());
+      auto path = util::replace(optarg, "${HOME}", File::getCurrentDir());
     if (mustExist_) {
       File f(path);
       std::string err;
diff --git a/src/SocketBuffer.cc b/src/SocketBuffer.cc
index 62862ff..eed3c33 100644
--- a/src/SocketBuffer.cc
+++ b/src/SocketBuffer.cc
@@ -39,6 +39,7 @@
 
 #include "SocketCore.h"
 #include "DlAbortEx.h"
+#include "DlRetryEx.h"
 #include "message.h"
 #include "fmt.h"
 #include "LogFactory.h"
@@ -158,7 +159,7 @@ ssize_t SocketBuffer::send()
     }
     ssize_t slen = socket_->writeVector(iov, num);
     if (slen == 0 && !socket_->wantRead() && !socket_->wantWrite()) {
-      throw DL_ABORT_EX(fmt(EX_SOCKET_SEND, "Connection closed."));
+        throw DL_RETRY_EX(fmt(EX_SOCKET_SEND, "Connection closed."));
     }
     // A2_LOG_NOTICE(fmt("num=%zu, amount=%d, bufq.size()=%zu, SEND=%d",
     //                   num, amount, bufq_.size(), slen));
diff --git a/src/SocketCore.cc b/src/SocketCore.cc
index e235f51..ab42ba7 100644
--- a/src/SocketCore.cc
+++ b/src/SocketCore.cc
@@ -1015,7 +1015,7 @@ bool SocketCore::tlsHandshake(TLSContext* tlsctx, const std::string& hostname)
 
     if (rv == TLS_ERR_ERROR) {
       // Damn those error.
-      throw DL_ABORT_EX(fmt("SSL/TLS handshake failure: %s",
+      throw DL_RETRY_EX(fmt("SSL/TLS handshake failure: %s",
                             handshakeError.empty()
                                 ? tlsSession_->getLastErrorString().c_str()
                                 : handshakeError.c_str()));
diff --git a/src/option_processing.cc b/src/option_processing.cc
index f9891fe..728ae07 100644
--- a/src/option_processing.cc
+++ b/src/option_processing.cc
@@ -319,6 +319,22 @@ error_code::Value option_processing(Option& op, bool standalone,
     }
   }
   if (standalone && op.getAsBool(PREF_DAEMON)) {
+#ifdef __MINGW32__
+      std::wstring daemonCmdLine = GetCommandLineW();
+      daemonCmdLine.append(L" --daemon=false");
+      STARTUPINFOW si = {};
+      PROCESS_INFORMATION pi = {};
+      si.dwFlags = STARTF_USESHOWWINDOW;
+      si.wShowWindow = FALSE;
+      BOOL bRet = CreateProcessW(
+                NULL, const_cast<LPWSTR>(daemonCmdLine.c_str()), NULL, NULL,
+                FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);
+      if (bRet) {
+            CloseHandle(pi.hThread);
+            CloseHandle(pi.hProcess);
+            ExitProcess(0);
+          }
+#else // !__MINGW32__
 #if defined(__GNUC__) && defined(__APPLE__)
 // daemon() is deprecated on OSX since... forever.
 // Silence the warning for good, so that -Werror becomes feasible.
@@ -334,6 +350,7 @@ error_code::Value option_processing(Option& op, bool standalone,
       perror(MSG_DAEMON_FAILED);
       return error_code::UNKNOWN_ERROR;
     }
+#endif // __MINGW32__
   }
   if (op.getAsBool(PREF_DEFERRED_INPUT) && op.defined(PREF_SAVE_SESSION)) {
     A2_LOG_WARN("--deferred-input is disabled because of the presence of "
diff --git a/src/prefs.cc b/src/prefs.cc
index fe98268..3f5e01f 100644
--- a/src/prefs.cc
+++ b/src/prefs.cc
@@ -326,6 +326,18 @@ PrefPtr PREF_ENABLE_ASYNC_DNS6 = makePref("enable-async-dns6");
 PrefPtr PREF_MAX_DOWNLOAD_RESULT = makePref("max-download-result");
 // value: 1*digit
 PrefPtr PREF_RETRY_WAIT = makePref("retry-wait");
+// value: true | false
+PrefPtr PREF_RETRY_ON_LOWEST_SPEED = makePref("retry-on-lowest-speed");
+// value: true | false
+PrefPtr PREF_RETRY_ON_NOT_SATISFIED_206 = makePref("retry-on-not-satisfied-206");
+// value: true | false
+PrefPtr PREF_RETRY_ON_400 = makePref("retry-on-400");
+// value: true | false
+PrefPtr PREF_RETRY_ON_403 = makePref("retry-on-403");
+// value: true | false
+PrefPtr PREF_RETRY_ON_406 = makePref("retry-on-406");
+// value: true | false
+PrefPtr PREF_RETRY_ON_UNKNOWN = makePref("retry-on-unknown");
 // value: string
 PrefPtr PREF_ASYNC_DNS_SERVER = makePref("async-dns-server");
 // value: true | false
diff --git a/src/prefs.h b/src/prefs.h
index 9719b3b..a235535 100644
--- a/src/prefs.h
+++ b/src/prefs.h
@@ -279,6 +279,18 @@ extern PrefPtr PREF_ENABLE_ASYNC_DNS6;
 extern PrefPtr PREF_MAX_DOWNLOAD_RESULT;
 // value: 1*digit
 extern PrefPtr PREF_RETRY_WAIT;
+// value: true | false
+extern PrefPtr PREF_RETRY_ON_LOWEST_SPEED;
+// value: true | false
+extern PrefPtr PREF_RETRY_ON_NOT_SATISFIED_206;
+// value: true | false
+extern PrefPtr PREF_RETRY_ON_400;
+// value: true | false
+extern PrefPtr PREF_RETRY_ON_403;
+// value: true | false
+extern PrefPtr PREF_RETRY_ON_406;
+// value: true | false
+extern PrefPtr PREF_RETRY_ON_UNKNOWN;
 // value: string
 extern PrefPtr PREF_ASYNC_DNS_SERVER;
 // value: true | false
diff --git a/src/usage_text.h b/src/usage_text.h
index ebf67e3..4b15df6 100644
--- a/src/usage_text.h
+++ b/src/usage_text.h
@@ -64,6 +64,32 @@
   _(" --retry-wait=SEC             Set the seconds to wait between retries. \n" \
     "                              With SEC > 0, aria2 will retry download when the\n" \
     "                              HTTP server returns 503 response.")
+#define TEXT_RETRY_ON_LOWEST_SPEED                                                 \
+  _(" --retry-on-lowest-speed[=true|false]  Configure whether retry or not when\n" \
+    "                              download speed is lower than or equal to lowest.\n" \
+    "                              speed limit. See also the --lowest-speed-limit option.\n" \
+    "                              Only effective if lowest-speed-limit > 0.")
+#define TEXT_RETRY_ON_NOT_SATISFIED_206                                     \
+  _(" --retry-on-not-satisfied-206[=true|false]  Configure whether retry or not when\n" \
+    "                              HTTP server returns unsatisfied 206 partial content or\n" \
+    "                              200 OK for a (range) request.\n"        \
+    "                              Only effective if retry-wait > 0.")
+#define TEXT_RETRY_ON_400                                                 \
+  _(" --retry-on-400[=true|false]  Configure whether retry or not when\n" \
+    "                              HTTP server returns 400 Bad Request.\n" \
+    "                              Only effective if retry-wait > 0.")
+#define TEXT_RETRY_ON_403                                                 \
+  _(" --retry-on-403[=true|false]  Configure whether retry or not when\n" \
+    "                              HTTP server returns 403 Forbidden.\n" \
+    "                              Only effective if retry-wait > 0.")
+#define TEXT_RETRY_ON_406                                                 \
+  _(" --retry-on-406[=true|false]  Configure whether retry or not when\n" \
+    "                              HTTP server returns 406 Not Acceptable.\n" \
+    "                              Only effective if retry-wait > 0.")
+#define TEXT_RETRY_ON_UNKNOWN                                                 \
+  _(" --retry-on-unknown[=true|false] Configure whether retry or not when\n" \
+    "                              HTTP server returns unknown status code.\n" \
+    "                              Only effective if retry-wait > 0.")
 #define TEXT_TIMEOUT                                            \
   _(" -t, --timeout=SEC            Set timeout in seconds.")
 #define TEXT_MAX_TRIES                                                  \
@@ -114,7 +140,8 @@
     "                              the active mode will be used.")
 #define TEXT_LOWEST_SPEED_LIMIT                                         \
   _(" --lowest-speed-limit=SPEED   Close connection if download speed is lower than\n" \
-    "                              or equal to this value(bytes per sec).\n" \
+    "                              or equal to this value(bytes per sec), except that.\n" \
+    "                              --retry-on-lowest-speed is set to true.\n" \
     "                              0 means aria2 does not have a lowest speed limit.\n" \
     "                              You can append K or M(1K = 1024, 1M = 1024K).\n" \
     "                              This option does not affect BitTorrent downloads.")
diff --git a/src/util.cc b/src/util.cc
index 07502c0..e6da18f 100644
--- a/src/util.cc
+++ b/src/util.cc
@@ -1805,9 +1805,12 @@ std::string getXDGDir(const std::string& environmentVariable,
 
 std::string getConfigFile()
 {
-  std::string filename = getHomeDir() + "/.aria2/aria2.conf";
+    std::string filename = File::getCurrentDir() + "/.aria2/aria2.conf";
   if (!File(filename).exists()) {
-    filename = getXDGDir("XDG_CONFIG_HOME", getHomeDir() + "/.config") +
+      filename = File::getCurrentDir() + "/aria2.conf";
+  }
+    if (!File(filename).exists()) {
+        filename = getXDGDir("XDG_CONFIG_HOME", File::getCurrentDir() + "/.config") +
                "/aria2/aria2.conf";
   }
   return filename;
@@ -1816,9 +1819,12 @@ std::string getConfigFile()
 std::string getDHTFile(bool ipv6)
 {
   std::string filename =
-      getHomeDir() + (ipv6 ? "/.aria2/dht6.dat" : "/.aria2/dht.dat");
+          File::getCurrentDir() + (ipv6 ? "/.aria2/dht6.dat" : "/.aria2/dht.dat");
+  if (!File(filename).exists()) {
+        filename = File::getCurrentDir() + (ipv6 ? "/dht6.dat" : "/dht.dat");
+  }
   if (!File(filename).exists()) {
-    filename = getXDGDir("XDG_CACHE_HOME", getHomeDir() + "/.cache") +
+      filename = getXDGDir("XDG_CACHE_HOME", File::getCurrentDir() + "/.cache") +
                (ipv6 ? "/aria2/dht6.dat" : "/aria2/dht.dat");
   }
   return filename;
